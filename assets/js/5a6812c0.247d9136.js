"use strict";(self.webpackChunkjamswiki=self.webpackChunkjamswiki||[]).push([[566],{3905:function(e,a,n){n.d(a,{Zo:function(){return c},kt:function(){return d}});var r=n(7294);function t(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function s(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?s(Object(n),!0).forEach((function(a){t(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function l(e,a){if(null==e)return{};var n,r,t=function(e,a){if(null==e)return{};var n,r,t={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],a.indexOf(n)>=0||(t[n]=e[n]);return t}(e,a);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(t[n]=e[n])}return t}var g=r.createContext({}),o=function(e){var a=r.useContext(g),n=a;return e&&(n="function"==typeof e?e(a):i(i({},a),e)),n},c=function(e){var a=o(e.components);return r.createElement(g.Provider,{value:a},e.children)},m={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},u=r.forwardRef((function(e,a){var n=e.components,t=e.mdxType,s=e.originalType,g=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=o(n),d=t,p=u["".concat(g,".").concat(d)]||u[d]||m[d]||s;return n?r.createElement(p,i(i({ref:a},c),{},{components:n})):r.createElement(p,i({ref:a},c))}));function d(e,a){var n=arguments,t=a&&a.mdxType;if("string"==typeof e||t){var s=n.length,i=new Array(s);i[0]=u;var l={};for(var g in a)hasOwnProperty.call(a,g)&&(l[g]=a[g]);l.originalType=e,l.mdxType="string"==typeof e?e:t,i[1]=l;for(var o=2;o<s;o++)i[o]=n[o];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5358:function(e,a,n){n.r(a),n.d(a,{frontMatter:function(){return l},contentTitle:function(){return g},metadata:function(){return o},assets:function(){return c},toc:function(){return m},default:function(){return d}});var r=n(7462),t=n(3366),s=(n(7294),n(3905)),i=["components"],l={sidebar_position:2},g="Managers",o={unversionedId:"architecture/managers",id:"architecture/managers",title:"Managers",description:"JAMS's architecture is manager-based. A manager can be defined as a set of elements tools can use.",source:"@site/docs/architecture/managers.md",sourceDirName:"architecture",slug:"/architecture/managers",permalink:"/docs/architecture/managers",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/architecture/managers.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"docsSidebar",previous:{title:"Introduction",permalink:"/docs/architecture/introduction"}},c={},m=[{value:"Manager types",id:"manager-types",level:2},{value:"Basic managers",id:"basic-managers",level:3},{value:"Managers with a default value",id:"managers-with-a-default-value",level:3},{value:"Managers with a selected value",id:"managers-with-a-selected-value",level:3},{value:"Providers",id:"providers",level:2},{value:"Registry",id:"registry",level:2},{value:"Primary and secondary managers",id:"primary-and-secondary-managers",level:3},{value:"Accessing managers",id:"accessing-managers",level:2},{value:"Using managers",id:"using-managers",level:2},{value:"Creating new managers",id:"creating-new-managers",level:2},{value:"Listening managers&#39; changes",id:"listening-managers-changes",level:2}],u={toc:m};function d(e){var a=e.components,n=(0,t.Z)(e,i);return(0,s.kt)("wrapper",(0,r.Z)({},u,n,{components:a,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"managers"},"Managers"),(0,s.kt)("p",null,"JAMS's architecture is manager-based. A manager can be defined as a set of elements tools can use."),(0,s.kt)("h2",{id:"manager-types"},"Manager types"),(0,s.kt)("p",null,"JAMS provides three basic manager types."),(0,s.kt)("h3",{id:"basic-managers"},"Basic managers"),(0,s.kt)("p",null,"Implemented by the class ",(0,s.kt)("inlineCode",{parentName:"p"},"Manager"),". It Contains a set of elements without any hierarchy."),(0,s.kt)("h3",{id:"managers-with-a-default-value"},"Managers with a default value"),(0,s.kt)("p",null,"Behaves as a normal manager, with the difference that one of its values is the default value. These managers extend the\nclass ",(0,s.kt)("inlineCode",{parentName:"p"},"DefaultValuableManager"),"."),(0,s.kt)("h3",{id:"managers-with-a-selected-value"},"Managers with a selected value"),(0,s.kt)("p",null,"Behaves as a manager with a default value, with the difference that one of its values is selected. When the selected\nvalue is deleted, the default value is selected. These managers extend the class ",(0,s.kt)("inlineCode",{parentName:"p"},"SelectableManager"),"."),(0,s.kt)("h2",{id:"providers"},"Providers"),(0,s.kt)("p",null,"Every element stored in a manager is linked to the provider that created it. A provider can be a plug-in or JAMS itself.\nWhen a provider is detached from the application, all elements provided by it are removed from all managers."),(0,s.kt)("h2",{id:"registry"},"Registry"),(0,s.kt)("p",null,"The registry is a static element inside the application. It can be interpreted as a manager of mangers. With the\nregistry you can get, add, remove or modify attached managers. Just like a normal manager, when a provider is detached\nfrom the application, all provided managers are removed from the registry."),(0,s.kt)("h3",{id:"primary-and-secondary-managers"},"Primary and secondary managers"),(0,s.kt)("p",null,"JAMS classify managers into primary managers and secondary managers."),(0,s.kt)("p",null,"Primary managers can be accessed easily when a manager is being searched using its type using methods\nlike ",(0,s.kt)("inlineCode",{parentName:"p"},"Manager.of(Type.class)"),". There can only be one primary manager for each type."),(0,s.kt)("p",null,"To search secondary manager, its name must be given explicitly: ",(0,s.kt)("inlineCode",{parentName:"p"},'Jams.REGISTRY.of("other-manager", Type.class)'),"."),(0,s.kt)("h2",{id:"accessing-managers"},"Accessing managers"),(0,s.kt)("p",null,"There are two ways of accessing a manager: using the registry or using the shortcuts found in the class ",(0,s.kt)("inlineCode",{parentName:"p"},"Manager"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'// Returns the primary manager that manages languages.\nManager<Language> simpleLanguageManager = Manager.of(Language.class);\nsimpleLanguageManager = Jams.REGISTRY.of(Language.class);\n\n// Returns the primary selectable manager that manages languages.\nSelectableManager<Language> selectableLanguageManager = Manager.ofS(Language.class);\nselectableLanguageManager = (SelectableManager<Language>) Jams.REGISTRY.of(Language.class);\n\n// Returns the manager that is an instance of LanguageManager.\nLanguageManager languageManager = Manager.get(LanguageManager.class);\nlanguageManager = Jams.REGISTRY.get(LanguageManager.class);\n\n// Returns the manager with the given name.\nManager<Language> manager = Jams.REGISTRY.of("other-language-manager", Language.class);\n')),(0,s.kt)("h2",{id:"using-managers"},"Using managers"),(0,s.kt)("p",null,"Managers implement the interface ",(0,s.kt)("inlineCode",{parentName:"p"},"Set")," so they can be easily manipulated."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'SelectableManager<Language> manager = Manager.ofS(Language.class);\n\n// Accessing elements\nLanguage selectedLanguage = manager.getSelected();\nOptional<Language> english = manager.get("English");\n\n// Iterate through the manager\nmanager.forEach(language -> System.out.println(language.getName()));\n\n// Adding and removing elements\nif (english.isPresent()) {\n    manager.remove(english.get());\n    manager.add(english.get());\n}\n')),(0,s.kt)("h2",{id:"creating-new-managers"},"Creating new managers"),(0,s.kt)("p",null,"A manager can be created for any type that extends ",(0,s.kt)("inlineCode",{parentName:"p"},"ManagerResource"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'// The element to store inside the manager\npublic record MyElement(ResourceProvider provider, String name, double value) implements ManagerResource {\n    @Override\n    public ResourceProvider getResourceProvider() {return provider;}\n\n    @Override\n    public String getName() {return name;}\n}\n\n// The manager implementation\npublic class MyManager extends Manager<MyElement> {\n    \n    public MyManager(ResourceProvider provider) {\n        super(provider, "my-manager", MyElement.class, false);\n    }\n\n    @Override\n    protected void loadDefaultElements() {\n        add(new MyElement(provider, "test-1", 1.0));\n        add(new MyElement(provider, "test-2", 2.0));\n        add(new MyElement(provider, "test-3", 3.0));\n    }\n}\n\n// Register the manager whenever you want\nPlugin myPlugin = ...;\nJams.REGISTRY.registerPrimary(new MyManager(myPlugin));\n')),(0,s.kt)("h2",{id:"listening-managers-changes"},"Listening managers' changes"),(0,s.kt)("p",null,"Managers use JAMS's event system: a listener can be implemented easily."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-java"},'public void registerListeners() {\n    Manager.get(MyManager.class).registerListeners(this, true);\n}\n\n@Listener\nprivate void onElementRegister(ManagerElementRegisterEvent<MyElement> event) {\n    System.out.println("New element in my manager: " + event.getElement().getName());\n}\n')),(0,s.kt)("p",null,"The basic available events for managers are the following:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"ManagerElementRegisterEvent<Type>")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"ManagerElementUnregisterEvent<Type>")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"ManagerDefaultElementChangeEvent<Type>")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"ManagerSelectedElementChangeEvent<Type>"))))}d.isMDXComponent=!0}}]);