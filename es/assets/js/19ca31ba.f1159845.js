"use strict";(self.webpackChunkjamswiki=self.webpackChunkjamswiki||[]).push([[133],{3905:function(e,n,t){t.d(n,{Zo:function(){return d},kt:function(){return m}});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=a.createContext({}),l=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=l(e.components);return a.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=l(t),m=r,v=p["".concat(c,".").concat(m)]||p[m]||u[m]||i;return t?a.createElement(v,o(o({ref:n},d),{},{components:t})):a.createElement(v,o({ref:n},d))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=p;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var l=2;l<i;l++)o[l]=t[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},6164:function(e,n,t){t.r(n),t.d(n,{assets:function(){return d},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return u}});var a=t(7462),r=t(3366),i=(t(7294),t(3905)),o=["components"],s={sidebar_position:6},c="Directivas",l={unversionedId:"architecture/directives",id:"architecture/directives",title:"Directivas",description:"Las directivas son instrucciones que el ensamblador ejecuta al ensamblar un proyecto. Las directivas permiten al",source:"@site/i18n/es/docusaurus-plugin-content-docs/current/architecture/directives.md",sourceDirName:"architecture",slug:"/architecture/directives",permalink:"/es/docs/architecture/directives",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/architecture/directives.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"docsSidebar",previous:{title:"Instrucciones",permalink:"/es/docs/architecture/instructions"}},d={},u=[{value:"Implementaci\xf3n de una directiva",id:"implementaci\xf3n-de-una-directiva",level:2},{value:"Conjuntos de directivas",id:"conjuntos-de-directivas",level:2}],p={toc:u};function m(e){var n=e.components,t=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"directivas"},"Directivas"),(0,i.kt)("p",null,"Las directivas son instrucciones que el ensamblador ejecuta al ensamblar un proyecto. Las directivas permiten al\ndesarrollador definir espacios de memoria (con datos por defecto o no), indicar el flujo del ensamblaje, definir macros\ny equivalencias, entre otras funciones."),(0,i.kt)("p",null,"El preprocesador de JAMS se puede considerar una versi\xf3n primitiva y muy b\xe1sica\ndel ",(0,i.kt)("a",{parentName:"p",href:"https://gcc.gnu.org/onlinedocs/cpp/"},"preprocesador de C"),"."),(0,i.kt)("h2",{id:"implementaci\xf3n-de-una-directiva"},"Implementaci\xf3n de una directiva"),(0,i.kt)("p",null,"A diferencia de las instrucciones, las directivas est\xe1n definidas por una \xfanica clase que extiende la clase ",(0,i.kt)("inlineCode",{parentName:"p"},"Directive"),"."),(0,i.kt)("p",null,"Una implementaci\xf3n de una directiva puede sobreescribir los siguientes m\xe9todos:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"onDiscovery"),": este m\xe9todo se ejecuta cuando la directiva es encontrada en la fase de descubrimiento del ensamblador."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"onExpansion"),": este m\xe9todo se ejecuta cuando la directiva es encontrada en la fase de expansi\xf3n."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"onAddressAssignation"),": este m\xe9todo se ejecuta en la fase de asignaci\xf3n de direcciones. Si la directiva reserva\nmemoria o hace operaciones con la memoria, esta debe devolver la direcci\xf3n en la que empieza."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"onMemoryAssignation"),": este m\xe9todo se ejecuta en la fase de asignaci\xf3n de valores del ensamblador.")),(0,i.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"Informaci\xf3n de estado")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Las clases que implementan una directiva ",(0,i.kt)("strong",{parentName:"p"},"no deben almacenar informaci\xf3n de estado"),". Toda la directiva debe ser\nresuelta de manera local en los m\xe9todos definidos."))),(0,i.kt)("p",null,"Como ejemplo, una implementaci\xf3n de la directiva ",(0,i.kt)("inlineCode",{parentName:"p"},".space")," ser\xeda la siguiente:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'public class DirectiveSpace extends Directive {\n\n    public static final String NAME = "space";\n    private static final DirectiveParameterType[] PARAMETERS = {DirectiveParameterType.POSITIVE_INT};\n\n    public DirectiveSpace() {\n        super(NAME, PARAMETERS, false, false, true);\n    }\n\n    @Override\n    public OptionalInt onAddressAssignation(MIPS32AssemblerLine line, String[] parameters, String rawParameters) {\n        if (parameters.length != 1)\n            throw new AssemblerException(line.getIndex(), "." + NAME + " must have one parameter.");\n\n        if (!NumericUtils.isInteger(parameters[0]))\n            throw new AssemblerException(parameters[0] + " is not a number.");\n        int i = NumericUtils.decodeInteger(parameters[0]);\n        if (i < 0) throw new AssemblerException(i + " cannot be negative.");\n\n        MIPS32AssemblerData data = line.getAssembler().getAssemblerData();\n        data.align(0);\n        int start = data.getCurrent();\n        data.addCurrent(i);\n        return OptionalInt.of(start);\n    }\n\n}\n')),(0,i.kt)("h2",{id:"conjuntos-de-directivas"},"Conjuntos de directivas"),(0,i.kt)("p",null,"Las directivas est\xe1n agrupadas en ",(0,i.kt)("strong",{parentName:"p"},"conjuntos de directivas"),". Igual que con los conjuntos de instrucciones, un proyecto\ntendr\xe1 asignado un conjunto de directivas. Los conjuntos de directivas est\xe1n gestionados por el\ngestor ",(0,i.kt)("inlineCode",{parentName:"p"},"DirectiveSetManager"),"."))}m.isMDXComponent=!0}}]);